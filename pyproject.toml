[tool.black]
line-length = 110

[tool.ruff]
src = ["src"]
target-version = "py39"
line-length = 110

extend-exclude = [
    # default build directory
    "build/",
    # cockpit bits downloaded during the Cockpit CI run
    "integration-tests/submancockpit/",
]

select = [
    # "E",    # pycodestyle (errors)
    # "W",    # pycodestyle (warnings)
    # "F",    # pyflakes (formatting)
    # "I",    # imports (missing required import)
    # "UP",   # pyupgrade
    # "SYS",  # flake8-2020 (sys.version operations)
    # "ANN",  # flake8-annotations
    # "ASYNC",# flake8-async
    # "S",    # flake8-bandit
    # "BLE",  # flake8-blind-except
    # "FBT",  # flake8-boolean-trap
    # "B",    # flake8-bugbear
    # "A",    # flake8-builtins
    # "COM",  # flake8-commas
    # "C4",   # flake8-comprehentions
    # "DTZ",  # flake8-datetimez
    # "T10",  # flake8-debugger
    # "EM",   # flake8-errmsg
    # "EXE",  # flake8-executable
    # "FA",   # flake8-future-annotations
    # "ISC",  # flake8-implicit-str-concat
    # "ICN",  # flake8-import-conventions
    # "G",    # flake8-logging-format
    # "INP",  # flake8-no-pep420
    # "PIE",  # flake8-pie
    # "T20",  # flake8-print
    # "PYI",  # flake8-pyi
    # "PT",   # flake8-pytest-style
    # "Q",    # flake8-quotes
    # "RSE",  # flake8-raise
    # "RET",  # flake8-return
    # "SLF",  # flake8-self
    # "SLOT", # flake8-slots
    # "SIM",  # flake8-simplify
    # "TID",  # flake8-tidy-imports
    # "TCH",  # flake8-type-checking
    # "INT",  # flake8-gettext
    # "ARG",  # flake8-unused-arguments
    # "PTH",  # flake8-use-pathlib
    # "ERA",  # eradicate (commented out code)
    # "PL",   # pylint
    # "TRY",  # tryceratops (exception handling antipatterns)
    # "FLY",  # flynt (conversion to new-type format strings)
    # "PERF", # perflint
    # "RUF",  # ruff
]
ignore = [
    # Do not assign a `lambda` expression, use a `def`
    "E731",
    # Do not compare types, use `isinstance()`
    "E721",
]

[tool.ruff.per-file-ignores]
"test/test_repolib.py" = [
    # we need to mock some modules before importing additional files
    "E402"
]
"test/certdata.py" = [
    # trailing whitespace in test data
    "W291"
]
"test/*" = [
    # Possible hardcoded password assigned to argument
    "S105", "S106",
    # `subprocess` call with `shell=True` identified, security issue
    "S602",
    # Use a regular `assert` instead of unittest-style
    "PT009",
    # String contains ambiguous unicode character
    "RUF001",
]
